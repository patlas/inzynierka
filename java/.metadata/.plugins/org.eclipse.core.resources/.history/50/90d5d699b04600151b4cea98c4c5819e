package tcp.stream;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

import exceptions.ErrorException;

public class FileStreamer {
	
	int portNumber;
	String hostName = null;
	Socket streamSocket = null;
	PrintWriter outStream = null;
	TCPCommunication tcpcomm = null;
	
	//deprecated
	public void setPortNumber(int pn){
		portNumber = pn;
		
	}
	//deprecated
	public void setHostName(String hn){
		hostName = hn;
	}
	
	//deprecated
	public FileStreamer(String hn, int pn) throws UnknownHostException, IOException{
		hostName = hn;
		portNumber = pn;
		streamSocket = new Socket(hostName, portNumber);
		outStream = new PrintWriter(streamSocket.getOutputStream(), true);
	}
	
	public FileStreamer() throws ErrorException, UnknownHostException, IOException {
		
		if(hostName.isEmpty() || portNumber==0){
			System.out.println("Socket could not be created");
			throw new ErrorException("Wrong host name of port number");
		}
		else{
			streamSocket = new Socket(hostName, portNumber);
			outStream = new PrintWriter(streamSocket.getOutputStream(), true);
		}
		
	}
	
	public FileStreamer(TCPCommunication tcp){
		hostName = tcp.hostName;
		portNumber = tcp.portNumber;
		streamSocket = tcp.streamSocket;
		outStream = tcp.outStream;
		tcpcomm = tcp;
		
	}

	
	public boolean streamFile(String fileName){
		BufferedOutputStream outBufferedStream = null;
		 
		try {
			outBufferedStream = new BufferedOutputStream(streamSocket.getOutputStream());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		if(outBufferedStream != null){
			
			File fd = new File(fileName);
			byte[] fileByteArray = new byte[(int) fd.length()];
			
			//send info that file will be streamed
			tcpcomm.sendCommand(ControllCommands.START_FILE_STREAM);
			tcpcomm.sendCommand((int)fd.length());
			
			
			FileInputStream fileStream = null;
			
			try {
				fileStream = new FileInputStream(fd);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			BufferedInputStream fileBufferedStream = new BufferedInputStream(fileStream);
			
			try {
				fileBufferedStream.read(fileByteArray, 0, fileByteArray.length);
				outBufferedStream.write(fileByteArray, 0, fileByteArray.length);
				outBufferedStream.flush();
				outBufferedStream.close();
                //connectionSocket.close();
            
            } catch (IOException ex) {
                // Do exception handling
            	return false;
            }
			
		}
		 

		//outStream.println("TEST");
		/* 
		 * 1) streamować plik
		 * 2) wysłać komende o końcu streamu -> jego crc?
		 * 3) oczekiwać komendy potwierdzającej poprawne odebranie pliku -> zrobione
		 */
		
		//outStream.wr
		
		System.out.println(isTransferSuccesfull());
		return true;
	}
	
	private boolean isTransferSuccesfull(){
		while(!tcpcomm.sendCommand(ControllCommands.testcommand));
		System.out.println("Command send");
		
		try {
			if(tcpcomm.receiveCommand().equals(ControllCommands.TRANSFER_SUCCESFULL))
				return true;
			else
				return false;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}
	
}
