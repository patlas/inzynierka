package tcp.stream;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.DigestInputStream;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

import javax.activation.MimetypesFileTypeMap;

import exceptions.ErrorException;

public class FileStreamer {
	
	int portNumber;
	String hostName = null;
	Socket streamSocket = null;
	PrintWriter outStream = null;
	TCPCommunication tcpcomm = null;
	
	//deprecated
	public void setPortNumber(int pn){
		portNumber = pn;
		
	}
	//deprecated
	public void setHostName(String hn){
		hostName = hn;
	}
	
	//deprecated
	public FileStreamer(String hn, int pn) throws UnknownHostException, IOException{
		hostName = hn;
		portNumber = pn;
		streamSocket = new Socket(hostName, portNumber);
		outStream = new PrintWriter(streamSocket.getOutputStream(), true);
	}
	
	public FileStreamer() throws ErrorException, UnknownHostException, IOException {
		
		if(hostName.isEmpty() || portNumber==0){
			System.out.println("Socket could not be created");
			throw new ErrorException("Wrong host name of port number");
		}
		else{
			streamSocket = new Socket(hostName, portNumber);
			outStream = new PrintWriter(streamSocket.getOutputStream(), true);
		}
		
	}
	
	public FileStreamer(TCPCommunication tcp){
		hostName = tcp.hostName;
		portNumber = tcp.portNumber;
		streamSocket = tcp.streamSocket;
		outStream = tcp.outStream;
		tcpcomm = tcp;
		
	}

	
	public boolean streamFile(String fileName){
		BufferedOutputStream outBufferedStream = null;
		 
		try {
			outBufferedStream = new BufferedOutputStream(streamSocket.getOutputStream());
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		if(outBufferedStream != null){
			fileName = "a.pdf";
			File fd = new File(fileName);
			byte[] fileByteArray = new byte[(int) fd.length()];
			
			//send info that file will be streamed
			tcpcomm.sendCommand(ControllCommands.START_FILE_STREAM);
			tcpcomm.sendCommand((int)fd.length());
			tcpcomm.sendCommand(getHash(fileName));
			//tcpcomm.sendCommand()
			//return true;
			System.out.println(x);fileName.split(".")[1]);
		
			/*
			FileInputStream fileStream = null;
			
			try {
				fileStream = new FileInputStream(fd);
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			BufferedInputStream fileBufferedStream = new BufferedInputStream(fileStream);
			
			try {
				fileBufferedStream.read(fileByteArray, 0, fileByteArray.length);
				outBufferedStream.write(fileByteArray, 0, fileByteArray.length);
				outBufferedStream.flush();
				outBufferedStream.close();
                //connectionSocket.close();
            
            } catch (IOException ex) {
                // Do exception handling
            	return false;
            }
		*/	
		}
		
		 

		//outStream.println("TEST");
		/* 
		 * 1) streamować plik
		 * 2) wysłać komende o końcu streamu -> jego crc?
		 * 3) oczekiwać komendy potwierdzającej poprawne odebranie pliku -> zrobione
		 */
		
		//outStream.wr
		
		System.out.println(isTransferSuccesfull());
		return true;
	}
	
	private boolean isTransferSuccesfull(){
		//TODO dodac jakis timeout zeby nie czekal w nieskonczonosc :D
		while(!tcpcomm.sendCommand(ControllCommands.SUCCESS_QUERY));
		System.out.println("Command send");
		
		try {
			if(tcpcomm.receiveCommand().equals(ControllCommands.TRANSFER_SUCCESFULL))
				return true;
			else
				return false;
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
			return false;
		}
	}
	
	private static String convertByteArrayToHexString(byte[] arrayBytes) {
	    StringBuffer stringBuffer = new StringBuffer();
	    for (int i = 0; i < arrayBytes.length; i++) {
	        stringBuffer.append(Integer.toString((arrayBytes[i] & 0xff) + 0x100, 16)
	                .substring(1));
	    }
	    return stringBuffer.toString();
	}
	
	
	public static String getHash(String fileName){
		
		MessageDigest digest = null;
		try (FileInputStream inputStream = new FileInputStream(fileName)) {
	        
			try {
				digest = MessageDigest.getInstance("MD5");
			} catch (NoSuchAlgorithmException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
	 
	        byte[] bytesBuffer = new byte[1024];
	        int bytesRead = -1;
	 
	        try {
				while ((bytesRead = inputStream.read(bytesBuffer)) != -1) {
				    digest.update(bytesBuffer, 0, bytesRead);
				}
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
	   
		} catch (IOException e2) {
			// TODO Auto-generated catch block
			e2.printStackTrace();
		}
		byte[] hashedBytes = digest.digest();
		return convertByteArrayToHexString(hashedBytes);
	}
	
}
